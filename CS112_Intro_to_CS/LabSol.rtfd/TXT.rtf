{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 ///Lab14\
// Exercise 18.9 Solution: Power.java\
// Program calculates an exponent.\
import java.util.Scanner;\
\
public class Power\
\{\
   // recursively calculate value of exponent\
   public static int integerPower(int base, int exponent)\
   \{\
      if (exponent == 1)\
         return base;\
      else\
         return base * integerPower(base, exponent - 1);\
\
   \} \
\
   // get user input and calculate number\
   public static void main(String args[])\
   \{\
      Scanner scanner = new Scanner(System.in);\
\
      System.out.print("Enter base: ");\
      int base = scanner.nextInt(); // get base from user\
\
      System.out.print("Enter exponent: ");\
      int exponent = scanner.nextInt(); // get exponent from user\
\
      // raise to exponent if appropriate\
      if (exponent > 0)\
      \{\
         int result = integerPower(base, exponent);\
         System.out.printf("Value is %d%n", result);\
      \}\
      else\
         System.out.println("Invalid Exponent.");\
   \} \
\} // end class Power\
###\
// Exercise 18.11 Solution: Divisor.java\
// Program finds the greatest common divisor of two numbers.\
import java.util.Scanner;\
\
public class Divisor\
\{\
   public static void main(String[] args)\
   \{\
      Scanner input = new Scanner(System.in);\
      System.out.print("Enter first number (-1 to exit): ");\
      int num1 = input.nextInt();\
\
      while (num1 != -1)\
      \{\
         System.out.print("Enter second number: ");\
         int num2 = input.nextInt();\
      \
         System.out.printf("GCD is: %d%n%n", gcd(num1, num2));\
         \
         System.out.print("Enter first number (-1 to exit): ");\
         num1 = input.nextInt();\
      \} \
   \} \
\
   // calculate the greatest common divisor using Euclid's Algorithm\
   // alternatively, you can simply check every number up to the\
   // lesser of x or y to see if it divides both x and y.\
   public static int gcd(int x, int y)\
   \{\
      if (y == 0)\
         return x;\
      else\
         return gcd(y, x % y);\
   \} \
\} // end class Divisor\
###\
///Lab15\
 1.\
5\
4\
3\
2\
1\
0\
15\
2.\
52,12\
12,4\
4,0\
GCD is 4\
///Lab16\
import java.util.Random;\
\
public class Exercise1 \{\
	public static void main(String[] args)\
	\{\
	final int LEN=10;\
	int[] array=new int[LEN];\
	Random r=new Random();\
	int total=0;\
	for(int i=0; i< LEN; i++)\
		array[i]=-10;\
	for(int i=0; i< LEN; i++)\
		array[i]+=r.nextInt(11); //0 to 10\
	for(int number: array)\
	    total+=number;\
	System.out.println(total);\
	int smallest=array[0];\
	int largest=array[0];\
	for(int number: array)\
		\{\
		    if(number>largest)\
			largest=number;\
		    if(number < smallest)\
			smallest=number;\
		\}\
	System.out.println("largest:"+largest);\
	System.out.println("smallest:"+smallest);\
	\}\
	\
	\
\}\
###\
import java.util.Scanner;\
\
public class Exercise2 \{\
\
	public static void main(String[] args)\
	\{\
		int[] frequency= new int[10];\
		Scanner s=new Scanner(System.in);\
		for(int i =0; i< 5; i++) //prompt 5 times\
		\{\
			System.out.println("Please enter an integer number");\
			try\
			\{\
				frequency[s.nextInt()]++;\
			\}\
			catch(ArrayIndexOutOfBoundsException e)\
			 \{\
					 System.out.println(e);\
			\}\
		\}\
		for(int i=0; i < frequency.length; i++)\
			System.out.printf("Value %d appers %d times\\n",i,frequency[i]);\
		\
	\}\
\}\
###\
public class Book \{\
	private String title;\
	private String author;\
	public Book(String title, String author)\
	\{\
		this.title=title;\
		this.author=author;\
	\}\
	public String toString()\
	\{\
		return String.format("Book title: %s, author: %s\\n", title, author);\
	\}\
\}\
###\
import java.util.Scanner;\
\
public class BookTest \{\
	public static void main(String[] args)\
	\{\
		Book[] books = new Book[5];\
		Scanner s = new Scanner(System.in);\
		for(int i=0; i< 3; i++)\
		\{\
			System.out.println("Please enter the book title");\
			String title=s.nextLine();\
			System.out.println("Please enter the book author");\
			String author=s.nextLine();	\
			books[i]=new Book(title,author);\
		\}\
		for(Book book: books)\
			if (book != null)\
				System.out.println(book);\
	\}\
	\
\}\
\
///Lab18\
1. Super-class:\
a. Employee\
b. Polygon\
c. Student\
d. Person\
e. Employee\
f. BankAccount\
g. Vehicle\
h. Vehicle\
i. Car\
j. Vehicle\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width18040 \height5340
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Instructor extends Person\{\
	double salary;\
	Instructor(String name, int birth_year, double salary)\
	\{\
		super(name,  birth_year);\
		this.salary = salary;\
	\}\
	@Override\
	public String toString()\
	\{\
		return String.format("%s, Salary: %.2f ", super.toString(), salary);\
	\}\
\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Person \{\
	private String name;\
	private int birth_year;\
	public Person(String name, int birth_year)\
	\{\
		this.name=name;\
		this.birth_year=birth_year;\
	\}\
	\
	@Override\
	public String toString()\
	\{\
		return String.format("Name: %s,Birth Year %d", name, birth_year);\
	\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Student extends Person\{\
	private String major;\
	public Student(String name, int birth_year, String major)\
	\{\
		super(name,birth_year);\
		this.major = major;\
	\}\
	@Override\
	public String toString()\
	\{\
		return String.format("%s, Major: %s ", super.toString(), major);\
	\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Test \{\
\
	public static void main(String[] args)\
	\{\
		Student s=new Student("John", 1996, "CS");\
		Instructor i=new Instructor("Paul", 1970,2000);\
		Person p=new Person("Emma", 1999);\
		System.out.println(p);\
		System.out.println(i);\
		System.out.println(s);\
		\
	\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Employee \{\
private String name;\
private double salary;\
public Employee(String name, double salary)\
\{\
	this.name=name;\
	this.salary=salary;\
\}\
public String toString()\
\{\
	return String.format("Name: %s, salary %.2f", name,salary);\
\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class EmployeeTest \{\
	public static void main(String[] args)\
	\{\
		Employee emp=new Employee("Jim",2000);\
		Manager man=new Manager("Tim",2000,"CS");\
		Executive exe=new Executive("Sim",2000,"EE");\
		System.out.println(emp);\
		System.out.println(man);\
		System.out.println(exe);\
	\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Executive extends Manager\{\
public Executive(String name, double salary, String department)\
\{\
	super(name,salary,department);\
\}\
@Override\
public String toString()\
\{\
	return super.toString();\
\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public class Manager extends Employee\{\
private String department;\
public Manager(String name, double salary, String department)\
\{\
	super(name,salary);\
	this.department=department;\
\}\
@Override\
public String toString()\
\{\
	return String.format("%s, Department: %s", super.toString(), department);\
\}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 ###\
///Lab19\
import java.util.ArrayList;\
\
public class Rotate \{\
	public static void main(String[] args)\
	\{\
		ArrayList<Integer> list = new ArrayList<Integer>();\
		list.add(3);\
		list.add(5);\
		list.add(7);\
		list.add(11);\
		list.add(13);\
		list.add(2);	\
\
		System.out.println(list.toString());\
		rotate(list);\
		System.out.println(list.toString());\
\
	\}\
	public static void rotate(ArrayList<Integer> list)\
	\{\
		int first = list.get(0);\
		for(int i=0; i< list.size()-1; i++)\
			list.set(i, list.get(i+1));\
		list.set(list.size()-1,first);\
	\}\
	\
\}\
###\
import java.util.ArrayList;\
\
public class DeleteNegative \{\
	public static void main(String[] args)\
	\{\
		ArrayList<Integer> list = new ArrayList<Integer>();\
		list.add(-3);\
		list.add(5);\
		list.add(7);\
		list.add(-11);\
		list.add(-13);\
		list.add(2);	\
		list.add(0);\
		\
		System.out.println(list.toString());\
		deleteNegative(list);\
		System.out.println(list.toString());\
\
	\}\
	public static void deleteNegative(ArrayList<Integer> list)\
	\{\
		int i=0;\
		while(i < list.size())\
			if(list.get(i) <0)\
				list.remove(i);\
			else\
				i++;\
	\}\
\}\
###\
import java.util.ArrayList;\
\
public class Merge \{\
	public static void main(String[] args)\
	\{\
		ArrayList<Integer> a = new ArrayList<Integer>();\
		a.add(1);\
		a.add(4);\
		a.add(9);\
		a.add(6);\
		ArrayList<Integer> b = new ArrayList<Integer>();\
		b.add(13);\
		b.add(2);	\
\
		System.out.println(a.toString());\
		System.out.println(b.toString());\
		ArrayList<Integer> c = merge(a,b);\
		System.out.println(a.toString());\
		System.out.println(b.toString());		\
		System.out.println(c.toString());\
\
	\}\
	public static ArrayList<Integer>merge(ArrayList<Integer> a, ArrayList<Integer>b)\
	\{\
		ArrayList<Integer> result=new ArrayList<Integer>();\
		if(a.size() < b.size())\
		\{\
			for(int i=0; i < a.size(); i++)\
			\{\
				result.add(a.get(i));\
				result.add(b.get(i));\
			\}\
			for(int j=a.size(); j< b.size(); j++)\
				result.add(b.get(j));\
		\}\
		else\
		\{			\
			for(int i=0; i < b.size(); i++)\
			\{\
				result.add(a.get(i));\
			result.add(b.get(i));\
			\}\
			for(int j=b.size(); j< a.size(); j++)\
				result.add(a.get(j));\
		\}\
		return result;\
	\}\
\}\
###\
public class Coin\{\
           private double value=0.0;\
           private String name;\
           public Coin(double value, String name)\
           \{\
        	   this.value=value; \
        	   this.name=name;\
           \}\
           public String toString()\
           \{\
        	   return "Name "+name+" Value "+ value;\
           \}\
           public boolean equals(Coin other)\
           \{\
        	   return value==other.value && name==other.name;\
           \}\
      \}\
###\
public class CoinTest \{\
	public static void main(String[] args)\
	\{\
		Coin dim = new Coin(10,"Dim");\
		Coin nickel = new Coin(5,"Nickel");\
		System.out.println(dim);\
		System.out.println(nickel);\
		System.out.println(dim.equals(nickel));	\
	\}\
\}\
###\
///Lab20\
// Fig. 10.5: SalariedEmployee.java\
// SalariedEmployee concrete class extends abstract class Employee.\
\
public class SalariedEmployee extends Employee \
\{\
   private double weeklySalary;\
\
   // constructor\
   public SalariedEmployee(String firstName, String lastName, \
      String socialSecurityNumber, int month, int day, int year, \
      double weeklySalary)\
   \{\
      super(firstName, lastName, socialSecurityNumber, month, day, year); \
\
      if (weeklySalary < 0.0)\
         throw new IllegalArgumentException(\
            "Weekly salary must be >= 0.0");\
\
      this.weeklySalary = weeklySalary;\
   \} \
\
   // set salary\
   public void setWeeklySalary(double weeklySalary)\
   \{\
      if (weeklySalary < 0.0)\
         throw new IllegalArgumentException(\
            "Weekly salary must be >= 0.0");\
\
      this.weeklySalary = weeklySalary;\
   \} \
\
   // return salary\
   public double getWeeklySalary()\
   \{\
      return weeklySalary;\
   \} \
\
   // calculate earnings; override abstract method earnings in Employee\
   @Override                                                           \
   public double earnings()                                            \
   \{                                                                   \
      return getWeeklySalary();                                        \
   \}                                             \
\
   // return String representation of SalariedEmployee object   \
   @Override                                                    \
   public String toString()                                     \
   \{                                                            \
      return String.format("salaried employee: %s%n%s: $%,.2f",\
         super.toString(), "weekly salary", getWeeklySalary());\
   \} \
\} // end class SalariedEmployee\
###\
// Exercise 10.8 Solution: PayrollSystemTest.java\
// Employee hierarchy test program.\
import java.util.Scanner; // program uses Scanner to obtain user input\
\
public class PayrollSystemTest \
\{\
   public static void main(String[] args) \
   \{\
      // create subclass objects\
      SalariedEmployee salariedEmployee = \
         new SalariedEmployee(\
         "John", "Smith", "111-11-1111", 6, 15, 1944, 800.00);\
      HourlyEmployee hourlyEmployee = \
         new HourlyEmployee(\
         "Karen", "Price", "222-22-2222", 12, 29, 1960, 16.75, 40);\
      CommissionEmployee commissionEmployee = \
         new CommissionEmployee(\
         "Sue", "Jones", "333-33-3333", 9, 8, 1954, 10000, .06);\
      BasePlusCommissionEmployee basePlusCommissionEmployee = \
         new BasePlusCommissionEmployee(\
         "Bob", "Lewis", "444-44-4444", 3, 2, 1965, 5000, .04, 300);\
\
      System.out.println("Employees processed individually:\\n");\
      \
      System.out.printf("%s\\n%s: $%,.2f\\n\\n", \
         salariedEmployee, "earned", salariedEmployee.earnings());\
      System.out.printf("%s\\n%s: $%,.2f\\n\\n",\
         hourlyEmployee, "earned", hourlyEmployee.earnings());\
      System.out.printf("%s\\n%s: $%,.2f\\n\\n",\
         commissionEmployee, "earned", commissionEmployee.earnings());\
      System.out.printf("%s\\n%s: $%,.2f\\n\\n", \
         basePlusCommissionEmployee, \
         "earned", basePlusCommissionEmployee.earnings());\
\
      // create four-element Employee array\
      Employee[] employees = new Employee[4]; \
\
      // initialize array with Employees\
      employees[0] = salariedEmployee;\
      employees[1] = hourlyEmployee;\
      employees[2] = commissionEmployee; \
      employees[3] = basePlusCommissionEmployee;\
\
      Scanner input = new Scanner(System.in); // to get current month\
      int currentMonth;\
\
      // get and validate current month\
      do\
      \{\
         System.out.print("Enter the current month (1 - 12): ");\
         currentMonth = input.nextInt();\
         System.out.println();\
      \} while ((currentMonth < 1) || (currentMonth > 12));\
\
      System.out.println("Employees processed polymorphically:\\n");\
      \
      // generically process each element in array employees\
      for (Employee currentEmployee : employees) \
      \{\
         System.out.println(currentEmployee); // invokes toString\
\
         // determine whether element is a BasePlusCommissionEmployee\
         if (currentEmployee instanceof BasePlusCommissionEmployee) \
         \{\
            // downcast Employee reference to \
            // BasePlusCommissionEmployee reference\
            BasePlusCommissionEmployee employee = \
               (BasePlusCommissionEmployee) currentEmployee;\
\
            double oldBaseSalary = employee.getBaseSalary();\
            employee.setBaseSalary(1.10 * oldBaseSalary);\
            System.out.printf(\
               "new base salary with 10%% increase is: $%,.2f\\n",\
               employee.getBaseSalary());\
         \} // end if\
\
         // if month of employee's birthday, add $100 to salary\
         if (currentMonth == currentEmployee.getBirthDate().getMonth())\
            System.out.printf(\
               "earned $%,.2f %s\\n\\n", currentEmployee.earnings(), \
               "plus $100.00 birthday bonus");\
         else\
            System.out.printf(\
               "earned $%,.2f\\n\\n", currentEmployee.earnings());\
      \} // end for\
\
      // get type name of each object in employees array\
      for (int j = 0; j < employees.length; j++)\
         System.out.printf("Employee %d is a %s\\n", j, \
            employees[j].getClass().getName()); \
   \} // end main\
\} // end class PayrollSystemTest\
\
###\
// Fig. 10.6: HourlyEmployee.java\
// HourlyEmployee class extends Employee.\
\
public class HourlyEmployee extends Employee \
\{\
   private double wage; // wage per hour\
   private double hours; // hours worked for week\
\
   // constructor\
   public HourlyEmployee(String firstName, String lastName,\
      String socialSecurityNumber, int month, int day, int year, \
      double wage, double hours)\
   \{\
      super(firstName, lastName, socialSecurityNumber, month, day, year);\
\
      if (wage < 0.0) // validate wage\
         throw new IllegalArgumentException(\
            "Hourly wage must be >= 0.0");\
\
      if ((hours < 0.0) || (hours > 168.0)) // validate hours\
         throw new IllegalArgumentException(\
            "Hours worked must be >= 0.0 and <= 168.0");\
\
      this.wage = wage;\
      this.hours = hours;\
   \} \
\
   // set wage\
   public void setWage(double wage)\
   \{\
      if (wage < 0.0) // validate wage\
         throw new IllegalArgumentException(\
            "Hourly wage must be >= 0.0");\
\
      this.wage = wage;\
   \} \
\
   // return wage\
   public double getWage()\
   \{\
      return wage;\
   \} \
\
   // set hours worked\
   public void setHours(double hours)\
   \{\
      if ((hours < 0.0) || (hours > 168.0)) // validate hours\
         throw new IllegalArgumentException(\
            "Hours worked must be >= 0.0 and <= 168.0");\
\
      this.hours = hours;\
   \} \
\
   // return hours worked\
   public double getHours()\
   \{\
      return hours;\
   \} \
\
   // calculate earnings; override abstract method earnings in Employee\
   @Override                                                           \
   public double earnings()                                            \
   \{                                                                   \
      if (getHours() <= 40) // no overtime                           \
         return getWage() * getHours();                                \
      else                                                             \
         return 40 * getWage() + (getHours() - 40) * getWage() * 1.5;\
   \}                                          \
\
   // return String representation of HourlyEmployee object              \
   @Override                                                             \
   public String toString()                                              \
   \{                                                                     \
      return String.format("hourly employee: %s%n%s: $%,.2f; %s: %,.2f",\
         super.toString(), "hourly wage", getWage(),                     \
         "hours worked", getHours());                                   \
   \}                                    \
\} // end class HourlyEmployee\
\
###\
// Exercise 10.12 Solution: Employee.java\
// Employee abstract superclass.\
\
public abstract class Employee \
\{\
   private final String firstName;\
   private final String lastName;\
   private final String socialSecurityNumber;\
   private final Date birthDate;\
\
   // constructor\
   public Employee(String firstName, String lastName, \
      String socialSecurityNumber, int month, int day, int year)\
   \{\
      this.firstName = firstName;                                    \
      this.lastName = lastName;                                    \
      this.socialSecurityNumber = socialSecurityNumber;         \
      birthDate = new Date(month, day, year);\
   \} \
\
   // return first name\
   public String getFirstName()\
   \{\
      return firstName;\
   \} \
\
   // return last name\
   public String getLastName()\
   \{\
      return lastName;\
   \} \
\
   // return social security number\
   public String getSocialSecurityNumber()\
   \{\
      return socialSecurityNumber;\
   \} \
\
   // return birth date\
   public Date getBirthDate()\
   \{\
      return birthDate;\
   \} \
\
   // return String representation of Employee object\
   @Override\
   public String toString()\
   \{\
      return String.format("%s %s\\n%s: %s\\n%s: %s", \
         getFirstName(), getLastName(), \
         "social security number", getSocialSecurityNumber(), \
         "birth date", getBirthDate());\
   \} \
\
   // abstract method must be overridden by concrete subclasses\
   public abstract double earnings(); // no implementation here\
\} // end abstract class Employee\
###\
// Fig. 8.7: Date.java \
// Date class declaration.\
\
public class Date \
\{\
   private int month; // 1-12\
   private int day; // 1-31 based on month\
   private int year; // any year\
\
   private static final int[] daysPerMonth = \
      \{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\};\
   \
   // constructor: confirm proper value for month and day given the year\
   public Date(int month, int day, int year)\
   \{\
      // check if month in range\
      if (month <= 0 || month > 12)\
         throw new IllegalArgumentException(\
            "month (" + month + ") must be 1-12");\
\
      // check if day in range for month\
      if (day <= 0 || \
         (day > daysPerMonth[month] && !(month == 2 && day == 29)))\
         throw new IllegalArgumentException("day (" + day + \
            ") out-of-range for the specified month and year");\
\
      // check for leap year if month is 2 and day is 29\
      if (month == 2 && day == 29 && !(year % 400 == 0 || \
           (year % 4 == 0 && year % 100 != 0)))\
         throw new IllegalArgumentException("day (" + day +\
            ") out-of-range for the specified month and year");\
\
      this.month = month;\
      this.day = day;\
      this.year = year;\
\
      System.out.printf(\
         "Date object constructor for date %s%n", this);\
   \} \
\
   // return day\
   public int getDay()\
   \{\
      return day;\
   \}\
\
   // return month\
   public int getMonth()\
   \{\
      return month;\
   \}\
\
   // return year\
   public int getYear()\
   \{\
      return year;\
   \}\
\
   // return a String of the form month/day/year\
   public String toString()\
   \{ \
      return String.format("%d/%d/%d", getMonth(), getDay(), getYear()); \
   \} \
\} // end class Date\
###\
// Fig. 10.7: CommissionEmployee.java\
// CommissionEmployee class extends Employee.\
\
public class CommissionEmployee extends Employee \
\{\
   private double grossSales; // gross weekly sales\
   private double commissionRate; // commission percentage\
\
   // constructor\
   public CommissionEmployee(String firstName, String lastName, \
      String socialSecurityNumber, int month, int day, int year, \
      double grossSales, double commissionRate)\
   \{\
      super(firstName, lastName, socialSecurityNumber, month, day, year);\
\
      if (commissionRate <= 0.0 || commissionRate >= 1.0) // validate \
         throw new IllegalArgumentException(\
            "Commission rate must be > 0.0 and < 1.0");\
\
      if (grossSales < 0.0) // validate\
         throw new IllegalArgumentException("Gross sales must be >= 0.0");\
\
      this.grossSales = grossSales;\
      this.commissionRate = commissionRate;\
   \} \
\
   // set gross sales amount\
   public void setGrossSales(double grossSales)\
   \{\
      if (grossSales < 0.0) // validate\
         throw new IllegalArgumentException("Gross sales must be >= 0.0");\
\
      this.grossSales = grossSales;\
   \} \
\
   // return gross sales amount\
   public double getGrossSales()\
   \{\
      return grossSales;\
   \} \
\
   // set commission rate\
   public void setCommissionRate(double commissionRate)\
   \{\
      if (commissionRate <= 0.0 || commissionRate >= 1.0) // validate\
         throw new IllegalArgumentException(\
            "Commission rate must be > 0.0 and < 1.0");\
\
      this.commissionRate = commissionRate;\
   \} \
\
   // return commission rate\
   public double getCommissionRate()\
   \{\
      return commissionRate;\
   \} \
\
   // calculate earnings; override abstract method earnings in Employee\
   @Override                                                           \
   public double earnings()                                            \
   \{                                                                   \
      return getCommissionRate() * getGrossSales();                    \
   \}                                             \
\
   // return String representation of CommissionEmployee object\
   @Override                                                   \
   public String toString()                                    \
   \{                                                           \
      return String.format("%s: %s%n%s: $%,.2f; %s: %.2f",    \
         "commission employee", super.toString(),              \
         "gross sales", getGrossSales(),                       \
         "commission rate", getCommissionRate());             \
   \} \
\} // end class CommissionEmployee\
###\
// Fig. 10.8: BasePlusCommissionEmployee.java\
// BasePlusCommissionEmployee class extends CommissionEmployee.\
\
public class BasePlusCommissionEmployee extends CommissionEmployee \
\{\
   private double baseSalary; // base salary per week\
\
   // constructor\
   public BasePlusCommissionEmployee(String firstName, String lastName, \
      String socialSecurityNumber, int month, int day, int year, \
      double grossSales, double commissionRate, double baseSalary)\
   \{\
      super(firstName, lastName, socialSecurityNumber, \
         month, day, year, grossSales, commissionRate);\
\
      if (baseSalary < 0.0) // validate baseSalary                  \
         throw new IllegalArgumentException("Base salary must be >= 0.0");\
            \
      this.baseSalary = baseSalary;                \
   \}\
\
   // set base salary\
   public void setBaseSalary(double baseSalary)\
   \{\
      if (baseSalary < 0.0) // validate baseSalary                  \
         throw new IllegalArgumentException("Base salary must be >= 0.0");\
            \
      this.baseSalary = baseSalary;                \
   \} \
\
   // return base salary\
   public double getBaseSalary()\
   \{\
      return baseSalary;\
   \}\
\
   // calculate earnings; override method earnings in CommissionEmployee\
   @Override                                                            \
   public double earnings()                                             \
   \{                                                                    \
      return getBaseSalary() + super.earnings();                        \
   \} \
\
   // return String representation of BasePlusCommissionEmployee object\
   @Override                                                           \
   public String toString()                                            \
   \{                                                                   \
      return String.format("%s %s; %s: $%,.2f",                       \
         "base-salaried", super.toString(),                            \
         "base salary", getBaseSalary());                             \
   \} \
\} // end class BasePlusCommissionEmployee\
###\
///Lab22\
1.\
a, e, f\
/**\
   A bank account has a balance that can be changed by \
   deposits and withdrawals.\
*/\
public class BankAccount\
\{  \
   private double balance; \
\
   /**\
      Constructs a bank account with a zero balance.\
   */\
   public BankAccount()\
   \{  \
      balance = 0;\
   \}\
\
   /**\
      Constructs a bank account with a given balance.\
      @param initialBalance the initial balance\
   */\
   public BankAccount(double initialBalance)\
   \{  \
      balance = initialBalance;\
   \}\
    //copy constructor\
    public BankAccount(BankAccount other)\
   \{  \
      balance = other.balance;\
   \}\
   /**\
      Deposits money into the bank account.\
      @param amount the amount to deposit\
   */\
   public void deposit(double amount) \
   \{  \
      balance = balance + amount;\
   \}\
\
   /**\
      Withdraws money from the bank account.\
      @param amount the amount to withdraw\
   */\
   public void withdraw(double amount) \
   \{  \
      balance = balance - amount;\
   \}\
\
   /**\
      Gets the current balance of the bank account.\
      @return the current balance\
   */\
   public double getBalance()\
   \{  \
      return balance; \
   \}\
   @Override\
   public String toString()\
   \{\
\
       return String.format("Balance is: %s \\n", balance);\
   \}\
   /**\
      Transfers money from the bank account to another account\
      @param amount the amount to transfer\
      @param other the other account\
   */\
//   public void transfer(double amount, BankAccount other)\
//   \{  \
//      withdraw(amount);\
//      other.deposit(amount);\
//   \}\
\}\
###\
/**\
   This program tests the BankAccount class and\
   its subclasses. \
*/\
public class BankAccountTest\
\{  \
   public static void main(String[] args)\
   \{  \
      SavingsAccount momsSavings = new SavingsAccount(50,0.5);\
      System.out.println("*****momsSaving*****");\
      System.out.println(momsSavings);\
      System.out.println();\
      SavingsAccount momsSavingsDeepCopy = new SavingsAccount(momsSavings);\
      System.out.println("*****momsSavingDeepCopy*****");\
      System.out.println(momsSavingsDeepCopy);\
\
      CheckingAccount harrysChecking = new CheckingAccount(100);\
      System.out.println("*****harrysChecking*****");\
      System.out.println(harrysChecking);\
      System.out.println();\
      CheckingAccount harrysCheckingDeepCopy = new CheckingAccount(harrysChecking);\
      System.out.println("*****momsSavingDeepCopy*****");\
      System.out.println(harrysCheckingDeepCopy);\
   \}\
\}\
###\
/**\
   A checking account that charges transaction fees.\
*/\
public class CheckingAccount extends BankAccount\
\{  \
   private static final int FREE_TRANSACTIONS = 3;\
   private static final double TRANSACTION_FEE = 2.5;\
\
   private int transactionCount;\
\
   /**\
      Constructs a checking account with a given balance.\
      @param initialBalance the initial balance\
   */\
   public CheckingAccount(double initialBalance)\
   \{  \
      // Construct superclass\
      super(initialBalance);\
      \
      // Initialize transaction count\
      transactionCount = 0; \
   \}\
\
   public CheckingAccount(CheckingAccount other)\
   \{  \
      // Construct superclass\
      super(other);\
      \
      // Initialize transaction count\
      transactionCount = 0; \
   \}\
\
   public void deposit(double amount) \
   \{  \
      transactionCount++;\
      // Now add amount to balance \
      super.deposit(amount); \
   \}\
   \
   public void withdraw(double amount) \
   \{  \
      transactionCount++;\
      // Now subtract amount from balance \
      super.withdraw(amount); \
   \}\
\
   /**\
      Deducts the accumulated fees and resets the\
      transaction count.\
   */\
   public void deductFees()\
   \{  \
      if (transactionCount > FREE_TRANSACTIONS)\
      \{  \
         double fees = TRANSACTION_FEE *\
               (transactionCount - FREE_TRANSACTIONS);\
         super.withdraw(fees);\
      \}\
      transactionCount = 0;\
   \}\
   @Override\
   public String toString()\
    \{\
	\
	return String.format("%stransaction count is: %s \\n", super.toString(), transactionCount);\
    \}\
\}\
###\
/**\
   An account that earns interest at a fixed rate.\
*/\
public class SavingsAccount extends BankAccount\
\{  \
   private double interestRate;\
\
   /**\
      Constructs a bank account with a given interest rate.\
      @param rate the interest rate\
   */\
   public SavingsAccount(double initialBalance,double rate) \
   \{  \
      super(initialBalance);\
      interestRate = rate;\
   \}\
   public SavingsAccount(SavingsAccount other) \
   \{  \
      super(other);\
      interestRate = other.interestRate;\
   \}\
\
   /**\
      Adds the earned interest to the account balance.\
   */\
   public void addInterest() \
   \{  \
      double interest = getBalance() * interestRate / 100;\
      deposit(interest); \
   \}\
    @Override\
    public String toString()\
    \{\
	return String.format("%sinterest rate is: %s\\n",super.toString(),interestRate);\
    \}\
\}\
###\
///Lab23\
 1. \
The number 1 is less than 100\
The number 22 is less than 100\
java.lang.Exception: Number too large.\
Main method completed successfully.\
\
2.\
a) 108\
b) 124\
c) Q3 aborts with no return value.\
d) 109\
e) 106\
}