{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 ///Qiz16\
import java.util.Scanner;\
\
public class Unique \{\
    public static void main(String[] args)// throws ArrayIndexOutOfBoundsException\
    \{\
	int[] frequency= new int[10];\
	Scanner s=new Scanner(System.in);\
	for(int i =0; i< 5; i++) //prompt 5 times\
	    \{\
		System.out.println("Pick an integer between 0 and 9, inclusive that you have not picked previously:");\
		int number = s.nextInt();\
		try\
		    \{\
			if(frequency[number] != 0)\
			    System.out.println("You have picked "+number+" previously" );\
			else\
			    frequency[number]++;\
		    \}\
		catch(ArrayIndexOutOfBoundsException e)\
		    \{\
			System.out.println(e+" is not between 0 and 9");\
		    \}\
	    \}\
	System.out.println("The numbers you picked are:");\
	for(int i=0; i < frequency.length; i++)\
	    if (frequency[i] ==1)\
		System.out.println(i);\
	s.close();\
    \}\
\
\}\
///Qiz18\
\
public class BasePlusCommissionEmployee extends Employee\{\
	private double commissionRate;\
	private double grossSales;\
	public BasePlusCommissionEmployee(String name, double salary, double rate, double sales)\
	\{\
		super(name,salary);\
		if(rate>=0 && rate<=1)\
			commissionRate=rate;\
		else\
			throw new IllegalArgumentException("commission rate out of range");\
		grossSales=sales;\
	\}\
	@Override\
	public double pay()\
	\{\
		return super.pay()+grossSales*commissionRate;\
	\}\
	@Override\
	public String toString()\
	\{\
		return String.format("%s, gross Sales: %.2f, commissionRate: %.2f", super.toString(), grossSales, commissionRate);\
	\}\
\}\
###\
public class Employee \{\
private String name;\
private double salary;\
public Employee(String name, double salary)\
\{\
	this.name=name;\
	this.salary=salary;\
\}\
public double pay()\{return salary;\}\
public String toString()\
\{\
	return String.format("Name: %s, salary %.2f", name,salary);\
\}\
\}\
###\
public class EmployeeTest \{\
	public static void main(String[] args)\
	\{\
		Executive cio=new Executive("Tim",20000,"Head Office");\
		BasePlusCommissionEmployee salesRep = new BasePlusCommissionEmployee("Jim",2000,0.03, 300000);\
		Manager director = new Manager("Kim",5000,"Accounting"); \
		System.out.println(cio);\
		System.out.printf("Pay: %.2f\\n", cio.pay());\
		System.out.println(salesRep);\
		System.out.printf("Pay: %.2f\\n", salesRep.pay());\
		System.out.println(director);\
		System.out.printf("Pay: %.2f\\n", director.pay());\
	\}\
\}\
###\
public class Executive extends Manager\{\
	private static final double bonus=0.3;\
	public Executive(String name, double salary, String department)\
	\{		\
		super(name,salary,department);\
	\}\
	@Override\
	public double pay()\{return super.pay()*(1+bonus);\}\
	@Override\
	public String toString()\
	\{\
		return super.toString();\
	\}\
\}\
###\
public class Manager extends Employee\{\
	private String department;\
	public Manager(String name, double salary, String department)\
	\{\
		super(name,salary);\
		this.department=department;\
	\}\
	@Override\
	public String toString()\
	\{\
		return String.format("%s, Department: %s", super.toString(), department);\
	\}\
\}\
###\
///Quiz19\
import java.util.ArrayList;\
\
public class Diff \{\
\
	public static void main(String[] args)\
	\{\
		ArrayList<Integer> a = new ArrayList<Integer>();\
		a.add(1);\
		a.add(4);\
		a.add(9);\
		a.add(6);\
		ArrayList<Integer> b = new ArrayList<Integer>();\
		b.add(1);\
		b.add(2);\
		b.add(6);\
		System.out.println(a);\
		System.out.println(b);\
		ArrayList<Integer> result=diff(a,b);\
		System.out.print(result);\
	\}\
	public static ArrayList<Integer>diff(ArrayList<Integer>a,ArrayList<Integer>b)\
	\{\
		ArrayList<Integer>result = new ArrayList<Integer>();\
		for(int i=0;i<a.size(); i++)\
			if(!b.contains(a.get(i)))\
				result.add(a.get(i));\
		for(int i=0;i<b.size(); i++)\
			if(!a.contains(b.get(i)))\
				result.add(b.get(i));\
		return result;\
	\}\
\
		\
\
\}\
}